processbreak = False
photocomptonbreak = False
byElectronProcess = False
subfigs = False
plot_opt = ""
if "process_breakdown"  in STRIP_OPT:
	processbreak = True
	# using photonCountTypes instead:
	# [eventID,type,z,y,x], type = 0,1,2:compt,phot,other, z = 0,1: right,left
	# comptCounts, photCounts,otherCounts : [eventID,z,y,x]
	colors = ["blue","green","cyan","red"]
	names = ["Compton","Other","Photo & Compton","Photoelectric Only"]
	plotname = ["Compton","Other","PhotoCompton","Photo"]
	legend = tuplejoin(names,[" : "],colors)
	print(photonCountTypes.shape)
	compt = np.sum(comptCounts, axis = (1,2,3)).astype(int)
	phot = np.sum(photCounts, axis = (1,2,3)).astype(int)
	other = np.sum(otherCounts, axis = (1,2,3)).astype(int)
	#print(compt)
	#print(phot)
	#print(other)
	types = 2*(phot>0) - 1*(compt>0) #photo,photocompt,other,compt = 2,1,0,-1.
	typeProcess = (2*(evtType[:,1]>0)) - (evtType[:,0]>0)
	alpha = 0.6
if "photocompton_breakdown" in STRIP_OPT:
	photocomptonbreak = True
	colormap = ["red","orange","gold","yellow","green","cyan","blue","indigo","violet","purple","grey","black"]
	legend2 = tuplejoin(colormap,[":#C="],np.arange(1,13).astype(str).tolist())
	notProductionOnly = False
if "subfigures" in STRIP_OPT:
	subfigs = True
	linecolors = ["navy","lime","cadetblue","darkred"]
if "electron_processes" in STRIP_OPT:
	byElectronProcess = True
	typeProcess = typeA
	plot_opt += "_electron"
else:
	plot_opt += "_gamma"
#Detection Plot Maxima
detMax = 1000#500
detSumMax = 2000#2000
binwidth0 = 20
binwidth = 20#20
binwidth2 = 20#100
#def pltDet(i):
#def pltPD(i):
if Creation:
	#--- produced
	fig,axs = plt.subplots(ny,nx,figsize=(10,10),sharex=True,sharey=True)
	fig.suptitle("Created Photon Distributions")
	#def pltCreate(c):
	#	j = int(c/nx)
	#	i = c - (nx*j)
	#		counts = strip[:,j,i]
	#		mx = max(counts)
	#		if(mx>100):
	#			axs[j,i].hist(counts,bins = int(mx/100),range = [1,mx])

	#with multiprocessing.Pool(processes=num_cores-1) as pool:
	#    tqdm(pool.map(pltCreate,range(ny*nx)),total=(ny*nx))
	for j in range(ny):
		for i in range(nx):
			counts = strip[:,j,i]
			mx = max(counts)
			if(mx>100):
				axs[j,i].hist(counts,bins = int(mx/100),range = [1,mx])
	axs[ny-1,int(nx/2)].set_xlabel("Photons in an interacted Event")
	axs[int(ny/2),0].set_ylabel("Interacted Events")
	axs[0,nx-1].text(.95,.95,"Interacted Events = %1.0f" %(nEvents-uninteractedEvents),verticalalignment='top',horizontalalignment='right',transform=axs[0,nx-1].transAxes,fontsize=10)
	axs[0,nx-1].text(.95,.90,"Total Events = %1.0f" %(nEvents),verticalalignment='top',horizontalalignment='right',transform=axs[0,nx-1].transAxes,fontsize=10)
	plt.tight_layout()
	plt.subplots_adjust(wspace=0,hspace=0)
	plt.savefig(plotDIR+"Created Photon Distributions.png")
	#plt.show()
	plt.close()
	mx=5000
	#--- produced
	fig,axs = plt.subplots(1,1)
	fig.suptitle("Created Photon Distributions (Left + Right)")
	counts = [np.sum(strip[i]) for i in range(nEvents)]
	#counts = counts[np.nonzero(counts)]
	axs.hist(counts,bins = int(mx/10),range = [0,mx])
	axs.set_xlabel("Left+Right Photons in an interacted Event")
	axs.set_ylabel("Interacted Events")
	axs.text(.95,.95,"Interacted Events = %1.0f" %(nEvents-uninteractedEvents),verticalalignment='top',horizontalalignment='right',transform=axs.transAxes,fontsize=10)
	axs.text(.95,.90,"Total Events = %1.0f" %(nEvents),verticalalignment='top',horizontalalignment='right',transform=axs.transAxes,fontsize=10)
	plt.savefig(plotDIR+"Created Photon Distributions_Total.png")
	#plt.show()
	plt.close()
if Detection:
	mx=detMax
	#--- produced
	fig,axs = plt.subplots(ny,nx,figsize=(10,10),sharex=True,sharey=True)
	fig.suptitle("Detected Photon Distributions"+plot_opt)
	if(processbreak):
		for j in range(ny):
			for i in range(nx):
				counts = left[:,j,i]+right[:,j,i]
				#print(counts)
				#cases
				for c in range(4):
					countp = counts[types==(c-1)]
					countp = countp[np.nonzero(countp)]
					axs[j,i].hist(countp,bins = int(mx/binwidth0),range = [0,mx],color = colors[c],alpha = alpha)
		plt.figlegend(legend, bbox_to_anchor=(0.1, 1.02), loc='upper left', ncol=4, fancybox=True)
		axs[0,0].text(.95,.95,"Photons Generated by Type (Color)",verticalalignment='top',horizontalalignment='right',transform=axs[0,0].transAxes,fontsize=10)
	else:
		for j in range(ny):
			for i in range(nx):
				counts = left[:,j,i]+right[:,j,i]
				counts = counts[np.nonzero(counts)]
				axs[j,i].hist(counts,bins = int(mx/binwidth0),range = [0,mx])
	axs[ny-1,int(nx/2)].set_xlabel("Left+Right Photons in an interacted Event")
	axs[int(ny/2),0].set_ylabel("Interacted Events")
	axs[0,nx-1].text(.95,.95,"Interacted Events = %1.0f" %(nEvents-uninteractedEvents),verticalalignment='top',horizontalalignment='right',transform=axs[0,nx-1].transAxes,fontsize=10)
	axs[0,nx-1].text(.95,.60,"Total Events = %1.0f" %(nEvents),verticalalignment='top',horizontalalignment='right',transform=axs[0,nx-1].transAxes,fontsize=10)
	axs[0,nx-1].text(.95,.25,"Binwidth = %1.0f" %(binwidth0),verticalalignment='top',horizontalalignment='right',transform=axs[0,nx-1].transAxes,fontsize=10)
	plt.tight_layout()
	plt.subplots_adjust(wspace=0,hspace=0)
	plt.savefig(plotDIR+"Detected Photon Distributions"+plot_opt+".png", bbox_inches="tight")
	#plt.show()
	plt.close()
	mx=detSumMax
	#--- Detected Sums
	if(processbreak):
		fig,ax = plt.subplots(2,1,figsize=(5,10))
	else:
		fig,axs = plt.subplots(1,1)
	fig.suptitle("Detected Photon Distributions (Left + Right)"+plot_opt)
	counts = compt+phot+other
	#counts = counts[np.nonzero(counts)]
	if(processbreak):
		for c in range(4):
			countp = counts[typeProcess==(c-1)]
			countp = countp[np.nonzero(countp)]
			ax[0].hist(countp,bins = int(mx/binwidth),range = [0,mx],color = colors[c],alpha = alpha)
			ax[0].legend(legend, bbox_to_anchor=(0.0, 1.05), loc='upper left', ncol=4, fontsize='xx-small', fancybox=True)
			if (subfigs):
				fig2,ax2 = plt.subplots(1,1)
				ax2.set_title("Detected Photons:"+plotname[c]+"_Electron Breakdown")
				for d in range(4):
					countpz = counts[(typeProcess==(c-1)) & (typeA.astype(int)==(d-1))]
					photoAz = photoA[(typeProcess==(c-1)) & (typeA.astype(int)==(d-1))]
					comptonAz = comptonA[(typeProcess==(c-1)) & (typeA.astype(int)==(d-1))]
					#countpz = countpz[np.nonzero(countpz)]
					if(len(countpz)>0):
						countrange = (max(countpz)-min(countpz))
						if(countrange>0):
							ax2.hist(countpz,bins = int(mx/binwidth),range = [0,mx],color = colors[d],alpha = alpha)
							ax2.set_xlabel("Left+Right Photons in an interacted Event")
							ax2.set_ylabel("Interacted Events")
							sortP = sorted(zip(countpz,photoAz))
							X_ = [x for x,_ in sortP]
							Y_ = [y for _,y in sortP]
							#X_Y_Spline = make_interp_spline(countpz,photoAz)
							#X_ = np.linspace(countpz.min(), countpz.max(), int(mx/binwidth))
							#Y_ = X_Y_Spline(X_)
							hist, bin_edges = np.histogram(X_, bins = int(countrange/binwidth), weights = Y_)
							hist = hist / binwidth
							bin_centres = (bin_edges[:-1] + bin_edges[1:])/2
							ax2.plot(bin_centres,hist,color=linecolors[d])
							sortC = sorted(zip(countpz,comptonAz))
							X_ = [x for x,_ in sortC]
							Y_ = [y for _,y in sortC]
							#X_Y_Spline = make_interp_spline(countpz,comptonAz)
							#Y_ = X_Y_Spline(X_)
							hist, bin_edges = np.histogram(X_, bins = int(countrange/binwidth), weights = Y_)
							hist = hist / binwidth
							bin_centres = (bin_edges[:-1] + bin_edges[1:])/2
							ax2.plot(bin_centres,hist,color=linecolors[d],linestyle = "--")
					ax2.text(.95,.80-(0.05*d),"# Events : "+plotname[d]+"= %1.0f" %(len(countpz)),verticalalignment='top',horizontalalignment='right',transform=ax2.transAxes,fontsize=10)
				ax2.text(.95,.60,"Binwidth = %1.0f" %(binwidth),verticalalignment='top',horizontalalignment='right',transform=ax2.transAxes,fontsize=10)
				ax2.text(0.0,1.0,legend,verticalalignment='top',horizontalalignment='left',transform=ax2.transAxes,fontsize=8)
				ax2.text(0.0,.95,"Breakdown of Gamma "+plotname[c]+" by Electron processes.",verticalalignment='top',horizontalalignment='left',transform=ax2.transAxes,fontsize=10)
				ax2.text(0.0,.90,"Compton electrons are dashed, while photoelectrons are solid.",verticalalignment='top',horizontalalignment='left',transform=ax2.transAxes,fontsize=10)
				fig2.savefig(plotDIR+"Detected Photon Distributions_"+plotname[c]+"_breakdown.png")
				#ax2.close()
		ax[1].hist(counts,bins = int(mx/binwidth),range = [0,mx], color = "black",alpha = 1)
	else:
		axs.hist(counts,bins = int(mx/binwidth),range = [0,mx], color = "black",alpha = 1)
	# Energy Resolution Fitting
	mx2 = np.max(counts)
	hist, bin_edges = np.histogram(counts,bins=int(mx2/binwidth))
	bin_centres = (bin_edges[:-1] + bin_edges[1:])/2
	
	xs = bin_centres[np.where(hist == np.max(hist))]
	print(xs)
	p0 = [np.max(hist),int(xs[0]),5]
	fitted = False
	try:
		coeff, var_matrix = curve_fit(gauss, bin_centres, hist, p0=p0)
		fitted = True
	except:
		print("FIT FAILED")
	# Get the fitted curve
	if fitted:
		hist_fit = gauss(bin_centres, *coeff)
		print(max(hist_fit))
		fwhm = coeff[2]*FWHM
		Mean = coeff[1]
		amplitude = coeff[0]
		minlim = Mean-2*coeff[2]
		maxlim = Mean+2*coeff[2]
		countsPhotopeak = np.count_nonzero(counts > minlim) 
		totalcounts = len(counts)

	if(processbreak):
		axs = ax[0]
		if fitted:
			ax[1].plot(bin_centres, hist_fit, label='Fit', color = "red")
		ax[1].set_xlabel("Left+Right Photons in an interacted Event")
		ax[1].set_ylabel("Interacted Events")
		ax[1].set_title("Total")
	else:
		if fitted:
			ax[0].plot(bin_centres, hist_fit, label='Fit', color = "black")
	axs.set_xlabel("Left+Right Photons in an interacted Event")
	axs.set_ylabel("Interacted Events")
	axs.text(.95,.95,"Interacted Events = %1.0f" %(nEvents-uninteractedEvents),verticalalignment='top',horizontalalignment='right',transform=axs.transAxes,fontsize=10)
	axs.text(.95,.90,"Total Events = %1.0f" %(nEvents),verticalalignment='top',horizontalalignment='right',transform=axs.transAxes,fontsize=10)
	axs.text(.95,.85,"Binwidth = %1.0f" %(binwidth),verticalalignment='top',horizontalalignment='right',transform=axs.transAxes,fontsize=10)
	if fitted:
		ENERGYRESOLUTION = fwhm/Mean
		PHOTOPEAK_SHARPNESS = amplitude/fwhm
		PHOTOPEAK_FWHM = fwhm
		PHOTOPEAK_COUNT = countsPhotopeak
		PHOTOPEAK_PROPORTION = countsPhotopeak/totalcounts
		axs.text(.95,.80,"FWHM = %4.4f" %(fwhm),verticalalignment='top',horizontalalignment='right',transform=axs.transAxes,fontsize=10)
		axs.text(.95,.75,"Mean = %4.4f" %(Mean),verticalalignment='top',horizontalalignment='right',transform=axs.transAxes,fontsize=10)
		axs.text(.95,.70,"Energy Resolution = FWHM/Mean = %4.4f" %(ENERGYRESOLUTION),verticalalignment='top',horizontalalignment='right',transform=axs.transAxes,fontsize=10)
	else:
		ENERGYRESOLUTION = np.nan
		PHOTOPEAK_SHARPNESS = np.nan
		PHOTOPEAK_FWHM = np.nan
		PHOTOPEAK_COUNT = np.nan
		PHOTOPEAK_PROPORTION = np.nan
		axs.text(.95,.80,"Energy Resolution Fit FAILED",verticalalignment='top',horizontalalignment='right',transform=axs.transAxes,fontsize=10)
	fig.savefig(plotDIR+"Detected Photon Distributions_Total"+plot_opt+".png", bbox_inches="tight")
	#plt.show()
	plt.close()
	if(processbreak and photocomptonbreak):
		fig,axs = plt.subplots(1,1)
		if (notProductionOnly):
			topC = int(max(evtType2[:,0]))
			print(topC)
			countList = []
			pcEvents = len(counts[(typeProcess==1)])
			for indx in range(topC):
				countp = counts[(typeProcess==1) & ((evtType2[:,0]).astype(int)==indx)]
				#print(((evtType2[:,0]).astype(int)==indx))
				countp = countp[np.nonzero(countp)]
				if(len(countp)>0):
					countList.append(np.array(countp))
		else:
			print("ELSE TRIGGERED")
			topC = int(max(evtType[:,0]))
			print(topC)
			countList = []
			pcEvents = len(counts[(typeProcess==1)])
			for indx in range(topC):
				countp = counts[(typeProcess==1) & ((evtType[:,0]).astype(int)==indx)]
				print(((evtType[:,0]).astype(int)==indx))
				countp = countp[np.nonzero(countp)]
				if(len(countp)>0):
					countList.append(np.array(countp))
		print(countList)
		#axs.hist(countList,bins = int(mx/(5*binwidth)),stacked = False, range = [0,mx],color = colormap[0:len(countList)],alpha = alpha/2)
		for j in range(len(countList)):
			axs.hist(countList[j],bins = int(mx/(binwidth2)),range = [0,mx],color = colormap[j],alpha = alpha/2)

		axs.legend(legend2, bbox_to_anchor=(0.0, 1.05), loc='upper left', ncol=4, fontsize='xx-small', fancybox=True)

		fig.suptitle("Detected Photon Distribution: PhotoCompton (Gamma) // Cyan")
		axs.set_xlabel("Left+Right Photons in an interacted Event")
		axs.set_ylabel("Interacted Events")
		axs.text(.95,.95,"Interacted Events = %1.0f" %(nEvents-uninteractedEvents),verticalalignment='top',horizontalalignment='right',transform=axs.transAxes,fontsize=10)
		axs.text(.95,.90,"Total Events = %1.0f" %(nEvents),verticalalignment='top',horizontalalignment='right',transform=axs.transAxes,fontsize=10)
		axs.text(.95,.85,"Binwidth = %1.0f" %(binwidth2),verticalalignment='top',horizontalalignment='right',transform=axs.transAxes,fontsize=10)
		axs.text(.95,.80,"PhotoCompton Events = %1.0f" %(pcEvents),verticalalignment='top',horizontalalignment='right',transform=axs.transAxes,fontsize=10)
		plt.savefig(plotDIR+"Detected Photon Distributions_PC.png", bbox_inches="tight")
		plt.close()
if PD:
	#--- produced
	mx = 1
	fig,axs = plt.subplots(ny,nx,figsize=(10,10),sharex=True,sharey=True)
	fig.suptitle("Produced-Detected Ratio")
	for j in range(ny):
		for i in range(nx):
			counts = left[:,j,i]+right[:,j,i]
			strp = strip[:,j,i]
			idc = np.nonzero(strp)
			axs[j,i].scatter(strp[idc],counts[idc]/strp[idc])
			axs[j,i].set_ylim(0,mx)
	axs[ny-1,int(nx/2)].set_xlabel("Photons in an interacted Event")
	axs[int(ny/2),0].set_ylabel("Interacted Events")
	axs[0,nx-1].text(.95,.95,"Interacted Events = %1.0f" %(nEvents-uninteractedEvents),verticalalignment='top',horizontalalignment='right',transform=axs[0,nx-1].transAxes,fontsize=10)
	axs[0,nx-1].text(.95,.90,"Interacted Events = %1.0f" %(nEvents),verticalalignment='top',horizontalalignment='right',transform=axs[0,nx-1].transAxes,fontsize=10)
	plt.tight_layout()
	plt.subplots_adjust(wspace=0,hspace=0)
	plt.savefig(plotDIR+"Produced-Detected Ratio.png")
	#plt.show()
	plt.close()
