from tools.energyResolution.histogramOptions import *
from utils.simpleimport import *
from tools.energyResolution.plotHistograms import *
from tools.energyResolution.doiHistograms import *

# if Options.COMPLETEDETECTOR and "process_breakdown"  in Options.STRIP_OPT:
# 	raise("EXCEPTION: Electron Process Breakdown does not work with Complete Detector ... Neither does Gamma Breakdown (but that should never be used).")

# Optimization to use all events
# leftc=left
# rightc=right
# stripc=strip

arL = np.zeros(shape=(4,nArray),dtype=object)
if (Options.ArrayNumber == 0):
	for array in range(nArray):
		l,s,r = photonNPYLoad(array)
		arL[0,array]=l
		arL[1,array]=s
		arL[2,array]=r
		with open(Options.datadir+'gammaInteractPosition_AR'+str(array)+'.pkl','rb') as f: 
			_,_,acvt,_ = pickle.load(f)
		arL[3,array]=acvt[:,2]
		# print("Summing UP --")
l0 = np.sum(arL[0,:],axis=0)
r0 = np.sum(arL[2,:],axis=0)
count0 = np.sum( l0 + r0 ,axis=(1,2))
uninteractedEvents = sum( count0 <= 0 )
if "DOI" in Options.STRIP_OPT:
	leftc = np.concatenate(arL[0,:],axis=0)
	stripc = np.concatenate(arL[1,:],axis=0)
	rightc = np.concatenate(arL[2,:],axis=0)
	gammaZ = np.concatenate(arL[3,:],axis=0)
	countdoi = np.sum(leftc + rightc,axis=(1,2))
else:
	leftc = l0
	stripc = np.sum(arL[1,:],axis=0)
	rightc = r0
# print(leftc.shape)

if "process_breakdown"  in Options.STRIP_OPT:
	histogramOptions.processBreak = True
	# using photonCountTypes instead:
	# [eventID,type,z,y,x], type = 0,1,2:compt,phot,other, z = 0,1: right,left
	# comptCounts, photCounts,otherCounts : [eventID,z,y,x]
	colors = ["blue","green","cyan","red"]
	names = ["Compton","Other","Photo & Compton","Photoelectric Only"]
	plotname = ["Compton","Other","PhotoCompton","Photo"]
	legend = tuplejoin(names,[" : "],colors)

	alpha = 0.6
	if "electron_processes" in Options.STRIP_OPT:
		histogramOptions.byElectronProcess = True
		typeProcess = typeA
		histogramOptions.plot_opt += "_electron"
	else:

		print(photonCountTypes.shape)
		compt = np.sum(comptCounts, axis = (1,2,3)).astype(int)
		phot = np.sum(photCounts, axis = (1,2,3)).astype(int)
		other = np.sum(otherCounts, axis = (1,2,3)).astype(int)
		#print(compt)
		#print(phot)
		#print(other)
		types = 2*(phot>0) - 1*(compt>0) #photo,photocompt,other,compt = 2,1,0,-1.
		typeProcess = (2*(evtType[:,1]>0)) - (evtType[:,0]>0)
		histogramOptions.plot_opt += "_gamma"
	if "photocompton_breakdown" in Options.STRIP_OPT:
		histogramOptions.photocomptonbreak = True
		colormap = ["red","orange","gold","yellow","green","cyan","blue","indigo","violet","purple","grey","black"]
		legend2 = tuplejoin(colormap,[":#C="],np.arange(1,13).astype(str).tolist())
		notProductionOnly = False
	if "subfigures" in Options.STRIP_OPT:
		histogramOptions.subfigs = True
		linecolors = ["navy","lime","cadetblue","darkred"]
elif "DOI" in Options.STRIP_OPT:
		doibreak = True
		colormap = ["grey","darkred","red","crimson","green","blue","navy","indigo","black","black"]
		legend2 = join(colormap,[":"])

#def pltDet(i):
#def pltPD(i):

if Options.Detection:
	mx=histogramOptions.detMax
	#--- produced
	fig,axs = plt.subplots(ny,nx,figsize=(10,10),sharex=True,sharey=True)
	fig.suptitle("Detected Photon Distributions"+histogramOptions.plot_opt)
	if(histogramOptions.processBreak and not histogramOptions.byElectronProcess):
		for j in range(ny):
			for i in range(nx):
				counts = leftc[:,j,i]+rightc[:,j,i]
				#print(counts)
				#cases
				for c in range(4):
					countp = counts[types==(c-1)]
					countp = countp[np.nonzero(countp)]
					axs[j,i].hist(countp,bins = int(mx/histogramOptions.binwidth_0),range = [0,mx],color = colors[c],alpha = alpha)
		plt.figlegend(legend, bbox_to_anchor=(0.1, 1.02), loc='upper left', ncol=4, fancybox=True)
		axs[0,0].text(.95,.95,"Photons Generated by Type (Color)",verticalalignment='top',horizontalalignment='right',transform=axs[0,0].transAxes,fontsize=10)
	else:
		for j in range(ny):
			for i in range(nx):
				counts = leftc[:,j,i]+rightc[:,j,i]
				countps = counts[np.nonzero(counts)]
				axs[j,i].hist(countps,bins = int(mx/histogramOptions.binwidth_0),range = [0,mx])
	axs[ny-1,int(nx/2)].set_xlabel("Left+Right Photons in an interacted Event")
	axs[int(ny/2),0].set_ylabel("Interacted Events")
	axs[0,nx-1].text(.95,.95,"Interacted Events = %1.0f" %(Options.nEvents-uninteractedEvents),verticalalignment='top',horizontalalignment='right',transform=axs[0,nx-1].transAxes,fontsize=10)
	axs[0,nx-1].text(.95,.60,"Total Events = %1.0f" %(Options.nEvents),verticalalignment='top',horizontalalignment='right',transform=axs[0,nx-1].transAxes,fontsize=10)
	axs[0,nx-1].text(.95,.25,"histogramOptions.binwidth_1 = %1.0f" %(histogramOptions.binwidth_0),verticalalignment='top',horizontalalignment='right',transform=axs[0,nx-1].transAxes,fontsize=10)
	plt.tight_layout()
	plt.subplots_adjust(wspace=0,hspace=0)
	plt.savefig(Options.plotDIR+"Detected Photon Distributions"+histogramOptions.plot_opt+".png", bbox_inches="tight")
	#plt.show()
	plt.close()
	mx=histogramOptions.detSumMax
	#--- Detected Sums
	if(histogramOptions.processBreak):
		fig,ax = plt.subplots(2,1,figsize=(5,10))
	else:
		fig,axs = plt.subplots(1,1)
	fig.suptitle("Detected Photon Distributions (Left + Right)"+histogramOptions.plot_opt)

	if(histogramOptions.processBreak):
		if not histogramOptions.byElectronProcess:
			counts = compt+phot+other
		else:
			counts = np.sum(leftc + rightc,axis=(1,2))
			print(counts.shape)
		for c in range(4):
			countp = counts[typeProcess==(c-1)]
			countp = countp[np.nonzero(countp)]
			ax[0].hist(countp,bins = int(mx/histogramOptions.binwidth_1),range = [0,mx],color = colors[c],alpha = alpha)
			ax[0].legend(legend, bbox_to_anchor=(0.0, 1.05), loc='upper left', ncol=4, fontsize='xx-small', fancybox=True)
			if (histogramOptions.subfigs):
				fig2,ax2 = plt.subplots(1,1)
				ax2.set_title("Detected Photons:"+plotname[c]+"_Electron Breakdown")
				for d in range(4):
					countpz = counts[(typeProcess==(c-1)) & (typeA.astype(int)==(d-1))]
					photoAz = photoA[(typeProcess==(c-1)) & (typeA.astype(int)==(d-1))]
					comptonAz = comptonA[(typeProcess==(c-1)) & (typeA.astype(int)==(d-1))]
					#countpz = countpz[np.nonzero(countpz)]
					if(len(countpz)>0):
						countrange = (max(countpz)-min(countpz))
						if(countrange>0):
							ax2.hist(countpz,bins = int(mx/histogramOptions.binwidth_1),range = [0,mx],color = colors[d],alpha = alpha)
							ax2.set_xlabel("Left+Right Photons in an interacted Event")
							ax2.set_ylabel("Interacted Events")
							sortP = sorted(zip(countpz,photoAz))
							X_ = [x for x,_ in sortP]
							Y_ = [y for _,y in sortP]
							#X_Y_Spline = make_interp_spline(countpz,photoAz)
							#X_ = np.linspace(countpz.min(), countpz.max(), int(mx/histogramOptions.binwidth_1))
							#Y_ = X_Y_Spline(X_)
							hist, bin_edges = np.histogram(X_, bins = int(countrange/histogramOptions.binwidth_1), weights = Y_)
							hist = hist / histogramOptions.binwidth_1
							bin_centres = (bin_edges[:-1] + bin_edges[1:])/2
							ax2.plot(bin_centres,hist,color=linecolors[d])
							sortC = sorted(zip(countpz,comptonAz))
							X_ = [x for x,_ in sortC]
							Y_ = [y for _,y in sortC]
							#X_Y_Spline = make_interp_spline(countpz,comptonAz)
							#Y_ = X_Y_Spline(X_)
							hist, bin_edges = np.histogram(X_, bins = int(countrange/histogramOptions.binwidth_1), weights = Y_)
							hist = hist / histogramOptions.binwidth_1
							bin_centres = (bin_edges[:-1] + bin_edges[1:])/2
							ax2.plot(bin_centres,hist,color=linecolors[d],linestyle = "--")
					ax2.text(.95,.80-(0.05*d),"# Events : "+plotname[d]+"= %1.0f" %(len(countpz)),verticalalignment='top',horizontalalignment='right',transform=ax2.transAxes,fontsize=10)
				ax2.text(.95,.60,"histogramOptions.binwidth_1 = %1.0f" %(histogramOptions.binwidth_1),verticalalignment='top',horizontalalignment='right',transform=ax2.transAxes,fontsize=10)
				ax2.text(0.0,1.0,legend,verticalalignment='top',horizontalalignment='left',transform=ax2.transAxes,fontsize=8)
				ax2.text(0.0,.95,"Breakdown of Gamma "+plotname[c]+" by Electron processes.",verticalalignment='top',horizontalalignment='left',transform=ax2.transAxes,fontsize=10)
				ax2.text(0.0,.90,"Compton electrons are dashed, while photoelectrons are solid.",verticalalignment='top',horizontalalignment='left',transform=ax2.transAxes,fontsize=10)
				fig2.savefig(Options.plotDIR+"Detected Photon Distributions_"+plotname[c]+"_breakdown.png")
				#ax2.close()
		ax[1].hist(counts,bins = int(mx/histogramOptions.binwidth_1),range = [0,mx], color = "black",alpha = 1)
	elif doibreak:
		counts = countdoi
		pltDOI(counts,gammaZ,axs,colormap,legend2,0.05,.99)
	else:
		counts = count0
		axs.hist(counts,bins = int(mx/histogramOptions.binwidth_1),range = [0,mx], color = "black",alpha = 1)
	# Energy Resolution Fitting
	print(count0)
	print(histogramOptions.binwidth_1)
	counts = count0[count0>histogramOptions.binwidth_1] # used to be non-zero, now we are cutting out the first bin
	mx2 = np.max(counts)
	hist, bin_edges = np.histogram(counts,bins=int(mx2/histogramOptions.binwidth_1))
	bin_centres = (bin_edges[:-1] + bin_edges[1:])/2

	xs = bin_centres[np.where(hist == np.max(hist))]
	print(xs)
	p0 = [np.max(hist),int(xs[0]),5]
	fitted = False
	try:
		coeff, var_matrix = curve_fit(gauss, bin_centres, hist, p0=p0)
		fitted = True
	except:
		print("FIT FAILED")
	# Get the fitted curve
	if fitted:
		hist_fit = gauss(bin_centres, *coeff)
		print(max(hist_fit))
		fwhm = coeff[2]*FWHM
		Mean = coeff[1]
		amplitude = coeff[0]
		minlim = Mean-2*coeff[2]
		maxlim = Mean+2*coeff[2]
		countsPhotopeak = np.count_nonzero(counts > minlim) 
		totalcounts = len(counts)

	if (histogramOptions.processBreak):
		axs = ax[0]
		if fitted:
			ax[1].plot(bin_centres, hist_fit, label='Fit', color = "red")
		ax[1].set_xlabel("Left+Right Photons in an interacted Event")
		ax[1].set_ylabel("Interacted Events")
		ax[1].set_title("Total")
	elif fitted and not doibreak:
		axs.plot(bin_centres, hist_fit, label='Fit', color = "red")
	axs.set_xlabel("Left+Right Photons in an interacted Event")
	axs.set_ylabel("Interacted Events")
	axs.text(.95,.95,"Interacted Events = %1.0f" %(Options.nEvents-uninteractedEvents),verticalalignment='top',horizontalalignment='right',transform=axs.transAxes,fontsize=10)
	axs.text(.95,.90,"Total Events = %1.0f" %(Options.nEvents),verticalalignment='top',horizontalalignment='right',transform=axs.transAxes,fontsize=10)
	axs.text(.95,.85,"Binwidth = %1.0f" %(histogramOptions.binwidth_1),verticalalignment='top',horizontalalignment='right',transform=axs.transAxes,fontsize=10)
	if fitted:
		ENERGYRESOLUTION = fwhm/Mean
		PHOTOPEAK_SHARPNESS = amplitude/fwhm
		PHOTOPEAK_FWHM = fwhm
		PHOTOPEAK_COUNT = countsPhotopeak
		PHOTOPEAK_PROPORTION = countsPhotopeak/totalcounts
		axs.text(
		    0.95,
		    0.80,
		    "FWHM = %4.4f" % PHOTOPEAK_FWHM,
		    verticalalignment='top',
		    horizontalalignment='right',
		    transform=axs.transAxes,
		    fontsize=10,
		)
		axs.text(.95,.75,"Mean = %4.4f" %(Mean),verticalalignment='top',horizontalalignment='right',transform=axs.transAxes,fontsize=10)
		axs.text(.95,.70,"Energy Resolution = %4.4f" %(ENERGYRESOLUTION),verticalalignment='top',horizontalalignment='right',transform=axs.transAxes,fontsize=10)
	else:
		ENERGYRESOLUTION = np.nan
		PHOTOPEAK_SHARPNESS = np.nan
		PHOTOPEAK_FWHM = np.nan
		PHOTOPEAK_COUNT = np.nan
		PHOTOPEAK_PROPORTION = np.nan
		axs.text(.95,.80,"Energy Resolution Fit FAILED",verticalalignment='top',horizontalalignment='right',transform=axs.transAxes,fontsize=10)
	fig.savefig(Options.plotDIR+"Detected Photon Distributions_Total"+histogramOptions.plot_opt+".png", bbox_inches="tight")
	#plt.show()
	plt.close()
	if (histogramOptions.processBreak and histogramOptions.photocomptonbreak):
		fig,axs = plt.subplots(1,1)
		countList = []
		if (notProductionOnly):
			topC = int(max(evtType2[:,0]))
			print(topC)
			pcEvents = len(counts[(typeProcess==1)])
			for indx in range(topC):
				countp = counts[(typeProcess==1) & ((evtType2[:,0]).astype(int)==indx)]
				#print(((evtType2[:,0]).astype(int)==indx))
				countp = countp[np.nonzero(countp)]
				if(len(countp)>0):
					countList.append(np.array(countp))
		else:
			print("ELSE TRIGGERED")
			topC = int(max(evtType[:,0]))
			print(topC)
			pcEvents = len(counts[(typeProcess==1)])
			for indx in range(topC):
				countp = counts[(typeProcess==1) & ((evtType[:,0]).astype(int)==indx)]
				print(((evtType[:,0]).astype(int)==indx))
				countp = countp[np.nonzero(countp)]
				if(len(countp)>0):
					countList.append(np.array(countp))
		print(countList)
		#axs.hist(countList,bins = int(mx/(5*histogramOptions.binwidth_1)),stacked = False, range = [0,mx],color = colormap[0:len(countList)],alpha = alpha/2)
		for j in range(len(countList)):
			axs.hist(countList[j],bins = int(mx/(histogramOptions.binwidth_2)),range = [0,mx],color = colormap[j],alpha = alpha/2)

		axs.legend(legend2, bbox_to_anchor=(0.0, 1.05), loc='upper left', ncol=4, fontsize='xx-small', fancybox=True)

		fig.suptitle("Detected Photon Distribution: PhotoCompton (Gamma) // Cyan")
		axs.set_xlabel("Left+Right Photons in an interacted Event")
		axs.set_ylabel("Interacted Events")
		axs.text(.95,.95,"Interacted Events = %1.0f" %(Options.nEvents-uninteractedEvents),verticalalignment='top',horizontalalignment='right',transform=axs.transAxes,fontsize=10)
		axs.text(.95,.90,"Total Events = %1.0f" %(Options.nEvents),verticalalignment='top',horizontalalignment='right',transform=axs.transAxes,fontsize=10)
		axs.text(.95,.85,"Binwidth = %1.0f" %(histogramOptions.binwidth_2),verticalalignment='top',horizontalalignment='right',transform=axs.transAxes,fontsize=10)
		axs.text(.95,.80,"PhotoCompton Events = %1.0f" %(pcEvents),verticalalignment='top',horizontalalignment='right',transform=axs.transAxes,fontsize=10)
		plt.savefig(Options.plotDIR+"Detected Photon Distributions_PC.png", bbox_inches="tight")
		plt.close()

if Options.Creation:
	pltCreation(stripc,uninteractedEvents)
if Options.PD:
	pltPD(leftc,stripc,rightc,uninteractedEvents)